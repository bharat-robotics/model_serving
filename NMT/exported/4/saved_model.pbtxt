saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "All"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ArgMax"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dimension"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "output_type"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "output_type"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Assert"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "data"
          type_list_attr: "T"
        }
        attr {
          name: "T"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "summarize"
          type: "int"
          default_value {
            i: 3
          }
        }
        is_stateful: true
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "BatchMatMul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        attr {
          name: "adj_x"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "adj_y"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "BiasAdd"
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "bias"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "Enter"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "frame_name"
          type: "string"
        }
        attr {
          name: "is_constant"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "parallel_iterations"
          type: "int"
          default_value {
            i: 10
          }
        }
      }
      op {
        name: "Equal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_QUINT8
              type: DT_QINT8
              type: DT_QINT32
              type: DT_STRING
              type: DT_BOOL
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Exit"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type_attr: "index_type"
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "index_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "GatherV2"
        input_arg {
          name: "params"
          type_attr: "Tparams"
        }
        input_arg {
          name: "indices"
          type_attr: "Tindices"
        }
        input_arg {
          name: "axis"
          type_attr: "Taxis"
        }
        output_arg {
          name: "output"
          type_attr: "Tparams"
        }
        attr {
          name: "Tparams"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "Taxis"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "GreaterEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "HashTableV2"
        output_arg {
          name: "table_handle"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "use_node_name_sharing"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "key_dtype"
          type: "type"
        }
        attr {
          name: "value_dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "ImageSummary"
        input_arg {
          name: "tag"
          type: DT_STRING
        }
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "max_images"
          type: "int"
          default_value {
            i: 3
          }
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_FLOAT
          }
          allowed_values {
            list {
              type: DT_UINT8
              type: DT_FLOAT
              type: DT_HALF
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "bad_color"
          type: "tensor"
          default_value {
            tensor {
              dtype: DT_UINT8
              tensor_shape {
                dim {
                  size: 4
                }
              }
              int_val: 255
              int_val: 0
              int_val: 0
              int_val: 255
            }
          }
        }
      }
      op {
        name: "InitializeTableFromTextFileV2"
        input_arg {
          name: "table_handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "filename"
          type: DT_STRING
        }
        attr {
          name: "key_index"
          type: "int"
          has_minimum: true
          minimum: -2
        }
        attr {
          name: "value_index"
          type: "int"
          has_minimum: true
          minimum: -2
        }
        attr {
          name: "vocab_size"
          type: "int"
          default_value {
            i: -1
          }
          has_minimum: true
          minimum: -1
        }
        attr {
          name: "delimiter"
          type: "string"
          default_value {
            s: "\t"
          }
        }
        is_stateful: true
      }
      op {
        name: "Less"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "LessEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "ListDiff"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "out"
          type_attr: "T"
        }
        output_arg {
          name: "idx"
          type_attr: "out_idx"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_idx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "LogicalAnd"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        input_arg {
          name: "y"
          type: DT_BOOL
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        is_commutative: true
      }
      op {
        name: "LogicalNot"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        output_arg {
          name: "y"
          type: DT_BOOL
        }
      }
      op {
        name: "LogicalOr"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        input_arg {
          name: "y"
          type: DT_BOOL
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        is_commutative: true
      }
      op {
        name: "LookupTableFindV2"
        input_arg {
          name: "table_handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "keys"
          type_attr: "Tin"
        }
        input_arg {
          name: "default_value"
          type_attr: "Tout"
        }
        output_arg {
          name: "values"
          type_attr: "Tout"
        }
        attr {
          name: "Tin"
          type: "type"
        }
        attr {
          name: "Tout"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "LoopCond"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Max"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Maximum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Merge"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        output_arg {
          name: "value_index"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Min"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Minimum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "NextIteration"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "ParseExample"
        input_arg {
          name: "serialized"
          type: DT_STRING
        }
        input_arg {
          name: "names"
          type: DT_STRING
        }
        input_arg {
          name: "sparse_keys"
          type: DT_STRING
          number_attr: "Nsparse"
        }
        input_arg {
          name: "dense_keys"
          type: DT_STRING
          number_attr: "Ndense"
        }
        input_arg {
          name: "dense_defaults"
          type_list_attr: "Tdense"
        }
        output_arg {
          name: "sparse_indices"
          type: DT_INT64
          number_attr: "Nsparse"
        }
        output_arg {
          name: "sparse_values"
          type_list_attr: "sparse_types"
        }
        output_arg {
          name: "sparse_shapes"
          type: DT_INT64
          number_attr: "Nsparse"
        }
        output_arg {
          name: "dense_values"
          type_list_attr: "Tdense"
        }
        attr {
          name: "Nsparse"
          type: "int"
          has_minimum: true
        }
        attr {
          name: "Ndense"
          type: "int"
          has_minimum: true
        }
        attr {
          name: "sparse_types"
          type: "list(type)"
          has_minimum: true
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_INT64
              type: DT_STRING
            }
          }
        }
        attr {
          name: "Tdense"
          type: "list(type)"
          has_minimum: true
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_INT64
              type: DT_STRING
            }
          }
        }
        attr {
          name: "dense_shapes"
          type: "list(shape)"
          has_minimum: true
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "Prod"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Rank"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "ReverseSequence"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "seq_lengths"
          type_attr: "Tlen"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "seq_dim"
          type: "int"
        }
        attr {
          name: "batch_dim"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tlen"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Round"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Sigmoid"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Size"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Split"
        input_arg {
          name: "split_dim"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
          number_attr: "num_split"
        }
        attr {
          name: "num_split"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Squeeze"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "squeeze_dims"
          type: "list(int)"
          default_value {
            list {
            }
          }
          has_minimum: true
        }
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "StringSplit"
        input_arg {
          name: "input"
          type: DT_STRING
        }
        input_arg {
          name: "delimiter"
          type: DT_STRING
        }
        output_arg {
          name: "indices"
          type: DT_INT64
        }
        output_arg {
          name: "values"
          type: DT_STRING
        }
        output_arg {
          name: "shape"
          type: DT_INT64
        }
        attr {
          name: "skip_empty"
          type: "bool"
          default_value {
            b: true
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Switch"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        input_arg {
          name: "pred"
          type: DT_BOOL
        }
        output_arg {
          name: "output_false"
          type_attr: "T"
        }
        output_arg {
          name: "output_true"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Tanh"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "TensorArrayGatherV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "indices"
          type: DT_INT32
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "element_shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "TensorArrayReadV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "index"
          type: DT_INT32
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "TensorArrayScatterV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "indices"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "flow_out"
          type: DT_FLOAT
        }
        attr {
          name: "T"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "TensorArraySizeV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "size"
          type: DT_INT32
        }
        is_stateful: true
      }
      op {
        name: "TensorArrayV3"
        input_arg {
          name: "size"
          type: DT_INT32
        }
        output_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        output_arg {
          name: "flow"
          type: DT_FLOAT
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "element_shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
        attr {
          name: "dynamic_size"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "clear_after_read"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "identical_element_shapes"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "tensor_array_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "TensorArrayWriteV3"
        input_arg {
          name: "handle"
          type: DT_RESOURCE
        }
        input_arg {
          name: "index"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "flow_in"
          type: DT_FLOAT
        }
        output_arg {
          name: "flow_out"
          type: DT_FLOAT
        }
        attr {
          name: "T"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Tile"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "multiples"
          type_attr: "Tmultiples"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tmultiples"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Transpose"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "perm"
          type_attr: "Tperm"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tperm"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "1.10.1"
    tensorflow_git_version: "v1.10.1-0-g4dcfddc5d1"
  }
  graph_def {
    node {
      name: "string_to_index/hash_table"
      op: "HashTableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "key_dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "hash_table_/home/bjoshi/tfserving/nmt_data/vocab.en_-2_-1"
        }
      }
      attr {
        key: "use_node_name_sharing"
        value {
          b: false
        }
      }
      attr {
        key: "value_dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "string_to_index/hash_table/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node {
      name: "string_to_index/hash_table/table_init/asset_filepath"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "/home/bjoshi/tfserving/nmt_data/vocab.en"
          }
        }
      }
    }
    node {
      name: "string_to_index/hash_table/table_init"
      op: "InitializeTableFromTextFileV2"
      input: "string_to_index/hash_table"
      input: "string_to_index/hash_table/table_init/asset_filepath"
      attr {
        key: "delimiter"
        value {
          s: "\t"
        }
      }
      attr {
        key: "key_index"
        value {
          i: -2
        }
      }
      attr {
        key: "value_index"
        value {
          i: -1
        }
      }
      attr {
        key: "vocab_size"
        value {
          i: -1
        }
      }
    }
    node {
      name: "string_to_index_1/hash_table"
      op: "HashTableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "key_dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "hash_table_/home/bjoshi/tfserving/nmt_data/vocab.vi_-2_-1"
        }
      }
      attr {
        key: "use_node_name_sharing"
        value {
          b: false
        }
      }
      attr {
        key: "value_dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "string_to_index_1/hash_table/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node {
      name: "string_to_index_1/hash_table/table_init/asset_filepath"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "/home/bjoshi/tfserving/nmt_data/vocab.vi"
          }
        }
      }
    }
    node {
      name: "string_to_index_1/hash_table/table_init"
      op: "InitializeTableFromTextFileV2"
      input: "string_to_index_1/hash_table"
      input: "string_to_index_1/hash_table/table_init/asset_filepath"
      attr {
        key: "delimiter"
        value {
          s: "\t"
        }
      }
      attr {
        key: "key_index"
        value {
          i: -2
        }
      }
      attr {
        key: "value_index"
        value {
          i: -1
        }
      }
      attr {
        key: "vocab_size"
        value {
          i: -1
        }
      }
    }
    node {
      name: "index_to_string"
      op: "HashTableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "key_dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "hash_table_/home/bjoshi/tfserving/nmt_data/vocab.vi_-1_-2"
        }
      }
      attr {
        key: "use_node_name_sharing"
        value {
          b: false
        }
      }
      attr {
        key: "value_dtype"
        value {
          type: DT_STRING
        }
      }
    }
    node {
      name: "index_to_string/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "<unk>"
          }
        }
      }
    }
    node {
      name: "index_to_string/table_init/asset_filepath"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "/home/bjoshi/tfserving/nmt_data/vocab.vi"
          }
        }
      }
    }
    node {
      name: "index_to_string/table_init"
      op: "InitializeTableFromTextFileV2"
      input: "index_to_string"
      input: "index_to_string/table_init/asset_filepath"
      attr {
        key: "delimiter"
        value {
          s: "\t"
        }
      }
      attr {
        key: "key_index"
        value {
          i: -1
        }
      }
      attr {
        key: "value_index"
        value {
          i: -2
        }
      }
      attr {
        key: "vocab_size"
        value {
          i: -1
        }
      }
    }
    node {
      name: "src_placeholder"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "</s>"
          }
        }
      }
    }
    node {
      name: "hash_table_Lookup"
      op: "LookupTableFindV2"
      input: "string_to_index/hash_table"
      input: "Const_1"
      input: "string_to_index/hash_table/Const"
      attr {
        key: "Tin"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Cast"
      op: "Cast"
      input: "hash_table_Lookup"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: " "
          }
        }
      }
    }
    node {
      name: "StringSplit"
      op: "StringSplit"
      input: "src_placeholder"
      input: "Const_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    node {
      name: "hash_table_Lookup_1"
      op: "LookupTableFindV2"
      input: "string_to_index/hash_table"
      input: "StringSplit:1"
      input: "string_to_index/hash_table/Const"
      attr {
        key: "Tin"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Cast_1"
      op: "Cast"
      input: "hash_table_Lookup_1"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "Cast_1"
      input: "ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Size"
      op: "Size"
      input: "ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "Size"
      input: "ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Size_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "Variable/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "Variable"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "Variable/Assign"
      op: "Assign"
      input: "Variable"
      input: "Variable/initial_value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Variable"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "Variable/read"
      op: "Identity"
      input: "Variable"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Variable"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\'C\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 17191
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/sub"
      op: "Sub"
      input: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/max"
      input: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/mul"
      op: "Mul"
      input: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/RandomUniform"
      input: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 17191
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/Initializer/random_uniform"
      op: "Add"
      input: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/mul"
      input: "embeddings/encoder/embedding_encoder/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 17191
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 17191
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 17191
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/Assign"
      op: "Assign"
      input: "embeddings/encoder/embedding_encoder"
      input: "embeddings/encoder/embedding_encoder/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 17191
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "embeddings/encoder/embedding_encoder/read"
      op: "Identity"
      input: "embeddings/encoder/embedding_encoder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 17191
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\035\036\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/sub"
      op: "Sub"
      input: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/max"
      input: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/mul"
      op: "Mul"
      input: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/RandomUniform"
      input: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/Initializer/random_uniform"
      op: "Add"
      input: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/mul"
      input: "embeddings/decoder/embedding_decoder/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 7709
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/Assign"
      op: "Assign"
      input: "embeddings/decoder/embedding_decoder"
      input: "embeddings/decoder/embedding_decoder/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "embeddings/decoder/embedding_decoder/read"
      op: "Identity"
      input: "embeddings/decoder/embedding_decoder"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/transpose/Rank"
      op: "Rank"
      input: "ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/transpose/sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/transpose/sub"
      op: "Sub"
      input: "dynamic_seq2seq/transpose/Rank"
      input: "dynamic_seq2seq/transpose/sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/transpose/Range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/transpose/Range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/transpose/Range"
      op: "Range"
      input: "dynamic_seq2seq/transpose/Range/start"
      input: "dynamic_seq2seq/transpose/Rank"
      input: "dynamic_seq2seq/transpose/Range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/transpose/sub_1"
      op: "Sub"
      input: "dynamic_seq2seq/transpose/sub"
      input: "dynamic_seq2seq/transpose/Range"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/transpose"
      op: "Transpose"
      input: "ExpandDims"
      input: "dynamic_seq2seq/transpose/sub_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/embedding_lookup/axis"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/embedding_lookup"
      op: "GatherV2"
      input: "embeddings/encoder/embedding_encoder/read"
      input: "dynamic_seq2seq/transpose"
      input: "dynamic_seq2seq/encoder/embedding_lookup/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/sequence_length"
      op: "Identity"
      input: "ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_5"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1"
      op: "Fill"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Equal"
      op: "Equal"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Shape"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/stack"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/All"
      op: "All"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Equal"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Expected shape for Tensor dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/sequence_length:0 is "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Assert/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: " but saw shape: "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Expected shape for Tensor dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/sequence_length:0 is "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: " but saw shape: "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Assert/Assert"
      op: "Assert"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/All"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/stack"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Shape"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/sequence_length"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Shape_1"
      op: "Shape"
      input: "dynamic_seq2seq/encoder/embedding_lookup"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice"
      op: "StridedSlice"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Shape_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice/stack"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice/stack_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/concat"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Min"
      op: "Min"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_3"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Max"
      op: "Max"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_4"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/time"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
      op: "TensorArrayV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray_1"
      op: "TensorArrayV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
      op: "Shape"
      input: "dynamic_seq2seq/encoder/embedding_lookup"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
      op: "Range"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
      input: "dynamic_seq2seq/encoder/embedding_lookup"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Maximum/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Maximum"
      op: "Maximum"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Maximum/x"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Max"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Minimum"
      op: "Minimum"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/iteration_counter"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/iteration_counter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_1"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/time"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_2"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_3"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_4"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_1"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_2"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_3"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_3"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_4"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_4"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less"
      op: "Less"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less_1"
      op: "Less"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Minimum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LogicalAnd"
      op: "LogicalAnd"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
      op: "LoopCond"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LogicalAnd"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_1"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_2"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_3"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_4"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_2"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_3"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_3:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_4"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_4:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add/y"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray_1"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
      op: "GreaterEqual"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\010\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
            dim {
              size: 2048
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2048
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 2048
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat/axis"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul"
      op: "MatMul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd"
      op: "BiasAdd"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_1"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split"
      op: "Split"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_2"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
      op: "Sigmoid"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul"
      op: "Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
      op: "Sigmoid"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
      op: "Tanh"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1"
      op: "Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
      op: "Tanh"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
      op: "Sigmoid"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      op: "Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select"
      op: "Select"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select/Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select_1"
      op: "Select"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select_2"
      op: "Select"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add_1/y"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add_1"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_1"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_2"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_3"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_4"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_1"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_2"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_3"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_4"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
      op: "Range"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 512
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/ReverseSequence"
      op: "ReverseSequence"
      input: "dynamic_seq2seq/encoder/embedding_lookup"
      input: "ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tlen"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "batch_dim"
        value {
          i: 1
        }
      }
      attr {
        key: "seq_dim"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/sequence_length"
      op: "Identity"
      input: "ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_5"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1"
      op: "Fill"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Equal"
      op: "Equal"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Shape"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/stack"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/All"
      op: "All"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Equal"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Expected shape for Tensor dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/sequence_length:0 is "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Assert/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: " but saw shape: "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Expected shape for Tensor dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/sequence_length:0 is "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: " but saw shape: "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Assert/Assert"
      op: "Assert"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/All"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/stack"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Shape"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/sequence_length"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Shape_1"
      op: "Shape"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/ReverseSequence"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice"
      op: "StridedSlice"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Shape_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice/stack"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice/stack_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/concat"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Min"
      op: "Min"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_3"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Max"
      op: "Max"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_4"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/time"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
      op: "TensorArrayV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray_1"
      op: "TensorArrayV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: false
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
      op: "Shape"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/ReverseSequence"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
      op: "StridedSlice"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
      op: "Range"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      op: "TensorArrayScatterV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/ReverseSequence"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/ReverseSequence"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Maximum/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Maximum"
      op: "Maximum"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Maximum/x"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Max"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Minimum"
      op: "Minimum"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Maximum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/iteration_counter"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/iteration_counter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_1"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/time"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_2"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_3"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_4"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_1"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_2"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_3"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_3"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_4"
      op: "Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_4"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less"
      op: "Less"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less_1"
      op: "Less"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Minimum"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LogicalAnd"
      op: "LogicalAnd"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
      op: "LoopCond"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LogicalAnd"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_1"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_2"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_3"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_4"
      op: "Switch"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_2"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_3"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_3:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_4"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_4:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add/y"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
      op: "TensorArrayReadV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray_1"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
      op: "GreaterEqual"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\010\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
            dim {
              size: 2048
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2048
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 2048
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
      op: "Identity"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat/axis"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul"
      op: "MatMul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd"
      op: "BiasAdd"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_1"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split"
      op: "Split"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_2"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
      op: "Sigmoid"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul"
      op: "Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
      op: "Sigmoid"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
      op: "Tanh"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1"
      op: "Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
      op: "Tanh"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
      op: "Sigmoid"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      op: "Mul"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select"
      op: "Select"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select/Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select_1"
      op: "Select"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select_2"
      op: "Select"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_4"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add_1/y"
      op: "Const"
      input: "^dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add_1"
      op: "Add"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_1"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_2"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_3"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_4"
      op: "NextIteration"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_1"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_2"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_3"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_4"
      op: "Exit"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
      op: "Range"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 512
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/ReverseSequence"
      op: "ReverseSequence"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
      input: "ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tlen"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "batch_dim"
        value {
          i: 1
        }
      }
      attr {
        key: "seq_dim"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/encoder/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
      input: "dynamic_seq2seq/encoder/ReverseSequence"
      input: "dynamic_seq2seq/encoder/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "<s>"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/hash_table_Lookup"
      op: "LookupTableFindV2"
      input: "string_to_index_1/hash_table"
      input: "dynamic_seq2seq/Const"
      input: "string_to_index_1/hash_table/Const"
      attr {
        key: "Tin"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/Cast"
      op: "Cast"
      input: "dynamic_seq2seq/hash_table_Lookup"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "</s>"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/hash_table_Lookup_1"
      op: "LookupTableFindV2"
      input: "string_to_index_1/hash_table"
      input: "dynamic_seq2seq/Const_1"
      input: "string_to_index_1/hash_table/Const"
      attr {
        key: "Tin"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/Cast_1"
      op: "Cast"
      input: "dynamic_seq2seq/hash_table_Lookup_1"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/Max"
      op: "Max"
      input: "ExpandDims_1"
      input: "dynamic_seq2seq/Const_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/ToFloat"
      op: "Cast"
      input: "dynamic_seq2seq/Max"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/mul"
      op: "Mul"
      input: "dynamic_seq2seq/ToFloat"
      input: "dynamic_seq2seq/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/Round"
      op: "Round"
      input: "dynamic_seq2seq/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/ToInt32"
      op: "Cast"
      input: "dynamic_seq2seq/Round"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/transpose"
      op: "Transpose"
      input: "dynamic_seq2seq/encoder/concat"
      input: "dynamic_seq2seq/decoder/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/Shape"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/strided_slice"
      op: "StridedSlice"
      input: "dynamic_seq2seq/decoder/LuongAttention/Shape"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice/stack"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice/stack_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Range"
      op: "Range"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Const"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Const_1"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/ExpandDims"
      op: "ExpandDims"
      input: "ExpandDims_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Cast"
      op: "Cast"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/ExpandDims"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Less"
      op: "Less"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Range"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Cast"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Cast_1"
      op: "Cast"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Less"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/ones/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/ones/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/ones"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/LuongAttention/ones/shape_as_tensor"
      input: "dynamic_seq2seq/decoder/LuongAttention/ones/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Equal"
      op: "Equal"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/x"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/All"
      op: "All"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Equal"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "memory_sequence_length and memory tensor batch sizes do not match."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x == y did not hold element-wise:"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (dynamic_seq2seq/decoder/LuongAttention/assert_equal/x:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (dynamic_seq2seq/decoder/LuongAttention/assert_equal/y:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "memory_sequence_length and memory tensor batch sizes do not match."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert/data_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x == y did not hold element-wise:"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (dynamic_seq2seq/decoder/LuongAttention/assert_equal/x:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert/data_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (dynamic_seq2seq/decoder/LuongAttention/assert_equal/y:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert"
      op: "Assert"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/All"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert/data_0"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert/data_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert/data_2"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/x"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert/data_4"
      input: "dynamic_seq2seq/decoder/LuongAttention/assert_equal/y"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/Shape_1"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Cast_1"
      input: "^dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/concat/axis"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/LuongAttention/assert_equal/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/Shape_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/ones"
      input: "dynamic_seq2seq/decoder/LuongAttention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/Reshape"
      op: "Reshape"
      input: "dynamic_seq2seq/decoder/LuongAttention/SequenceMask/Cast_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/transpose"
      input: "dynamic_seq2seq/decoder/LuongAttention/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/max"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/RandomUniform"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform"
      op: "Add"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/mul"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/memory_layer/kernel/read"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Shape"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/LuongAttention/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/axes"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Cast"
      op: "Cast"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Cast"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Less"
      op: "Less"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/axes"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Cast_1"
      op: "Cast"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/add"
      op: "Add"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/axes"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/mul_1"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Cast_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/add_1"
      op: "Add"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/mul"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/range"
      op: "Range"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/range/start"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Rank"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/ListDiff"
      op: "ListDiff"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/range"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2"
      op: "GatherV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Shape"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/ListDiff"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Shape"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/add_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Prod"
      op: "Prod"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Prod_1"
      op: "Prod"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat_1"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/ListDiff"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/add_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/stack"
      op: "Pack"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Prod"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/transpose"
      op: "Transpose"
      input: "dynamic_seq2seq/decoder/LuongAttention/mul"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Reshape"
      op: "Reshape"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/transpose"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/transpose_1"
      op: "Transpose"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel/read"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Reshape_1"
      op: "Reshape"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/transpose_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/MatMul"
      op: "MatMul"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Reshape"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat_2"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/GatherV2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/Const_2"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot"
      op: "Reshape"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/MatMul"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/Shape_2"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1"
      op: "StridedSlice"
      input: "dynamic_seq2seq/decoder/LuongAttention/Shape_2"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1/stack"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1/stack_1"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_1"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_2"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/concat_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_3"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/Const"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/concat"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_1"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_2/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_2"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/concat_1"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/Const_2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/zeros_1"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/concat_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_3/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_3"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/ExpandDims_3/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Equal"
      op: "Equal"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/All"
      op: "All"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Equal"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "When calling zero_state of AttentionWrapper attention: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x == y did not hold element-wise:"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (Size_1:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/y:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "When calling zero_state of AttentionWrapper attention: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x == y did not hold element-wise:"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (Size_1:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/y:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
      op: "Assert"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/All"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/y"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/checked_cell_state"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros"
      input: "^dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/checked_cell_state_1"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState/BasicLSTMCellZeroState/zeros_1"
      input: "^dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/checked_cell_state_2"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/zeros"
      input: "^dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/checked_cell_state_3"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/MultiRNNCellZeroState/DeviceWrapperZeroState_1/BasicLSTMCellZeroState/zeros_1"
      input: "^dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat_1"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/Const"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_2/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_2"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_2/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_6/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_6"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_6/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_7/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_7"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_7/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat_2"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_6"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_7"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/concat_2"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_8/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_8"
      op: "ExpandDims"
      input: "Size_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_8/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_9/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_9"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/LuongAttention/strided_slice_1"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/ExpandDims_9/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
      op: "TensorArrayV3"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray/size"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: true
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: -1
            }
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/expected_shape"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/actual"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/is_rank/actual"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/is_rank"
      op: "Equal"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/Size"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/is_rank/actual"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal/equal"
      op: "Equal"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/expected_shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/actual"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal"
      op: "All"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal/equal"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape"
      op: "LogicalAnd"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/is_rank"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Wrong shape for dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros:0 [expected] [actual]."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Wrong shape for dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros:0 [expected] [actual]."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/Assert"
      op: "Assert"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/is_shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/Assert/data_0"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/expected_shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/actual"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/Identity"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros"
      input: "^dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/assert_shape/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/expected_shape"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/actual"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/is_rank/actual"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/is_rank"
      op: "Equal"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/Size"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/is_rank/actual"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal/equal"
      op: "Equal"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/expected_shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/actual"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal"
      op: "All"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal/equal"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape"
      op: "LogicalAnd"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/is_rank"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Wrong shape for dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3:0 [expected] [actual]."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Wrong shape for dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3:0 [expected] [actual]."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/Assert"
      op: "Assert"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/Assert/data_0"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/expected_shape"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/actual"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/Identity"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3"
      input: "^dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/assert_shape/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/NoOp"
      op: "NoOp"
    }
    node {
      name: "dynamic_seq2seq/decoder/Fill/dims"
      op: "Pack"
      input: "Size_1"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/Fill"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/Fill/dims"
      input: "dynamic_seq2seq/Cast"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/embedding_lookup/axis"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/embedding_lookup"
      op: "GatherV2"
      input: "embeddings/decoder/embedding_decoder/read"
      input: "dynamic_seq2seq/decoder/Fill"
      input: "dynamic_seq2seq/decoder/embedding_lookup/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/Tile/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
              dim {
                size: 1
              }
            }
            bool_val: false
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/Tile/multiples"
      op: "Pack"
      input: "dynamic_seq2seq/decoder/Size"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/Tile"
      op: "Tile"
      input: "dynamic_seq2seq/decoder/decoder/Tile/input"
      input: "dynamic_seq2seq/decoder/decoder/Tile/multiples"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/ExpandDims"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/Size"
      input: "dynamic_seq2seq/decoder/decoder/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 7709
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/decoder/ExpandDims"
      input: "dynamic_seq2seq/decoder/decoder/Const"
      input: "dynamic_seq2seq/decoder/decoder/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/decoder/concat"
      input: "dynamic_seq2seq/decoder/decoder/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/ExpandDims_1"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/Size"
      input: "dynamic_seq2seq/decoder/decoder/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 7709
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/ExpandDims_2/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/ExpandDims_2"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/Size"
      input: "dynamic_seq2seq/decoder/decoder/ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/concat_1"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/decoder/ExpandDims_2"
      input: "dynamic_seq2seq/decoder/decoder/Const_2"
      input: "dynamic_seq2seq/decoder/decoder/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/zeros_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/zeros_1"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/decoder/concat_1"
      input: "dynamic_seq2seq/decoder/decoder/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/ExpandDims_3/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/ExpandDims_3"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/Size"
      input: "dynamic_seq2seq/decoder/decoder/ExpandDims_3/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/LessEqual"
      op: "LessEqual"
      input: "dynamic_seq2seq/ToInt32"
      input: "dynamic_seq2seq/decoder/decoder/LessEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/LogicalOr"
      op: "LogicalOr"
      input: "dynamic_seq2seq/decoder/decoder/Tile"
      input: "dynamic_seq2seq/decoder/decoder/LessEqual"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/zeros_like"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArray/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArray"
      op: "TensorArrayV3"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray/size"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: true
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 7709
            }
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArray_1/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArray_1"
      op: "TensorArrayV3"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray_1/size"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "clear_after_read"
        value {
          b: true
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dynamic_size"
        value {
          b: true
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
      attr {
        key: "identical_element_shapes"
        value {
          b: true
        }
      }
      attr {
        key: "tensor_array_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/iteration_counter"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/iteration_counter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_1"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/decoder/Const_4"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_2"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_3"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_4"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_5"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_6"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_7"
      op: "Enter"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_8"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_9"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_10"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_11"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_12"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/zeros_3/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_13"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/embedding_lookup"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_14"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/decoder/LogicalOr"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Enter_15"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/decoder/zeros_like"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_1"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_1"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_2"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_2"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_3"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_3"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_3"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_4"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_4"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_4"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_5"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_5"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_5"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_6"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_6"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_6"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_7"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_7"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_7"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_8"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_8"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_8"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_9"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_9"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_9"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_10"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_10"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_10"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_11"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_11"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_11"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_12"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_12"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_12"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_13"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_13"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_13"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_14"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_14"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_14"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Merge_15"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Enter_15"
      input: "dynamic_seq2seq/decoder/decoder/while/NextIteration_15"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Less"
      op: "Less"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/Less/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Less/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/ToInt32"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/All"
      op: "All"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_14"
      input: "dynamic_seq2seq/decoder/decoder/while/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/LogicalNot"
      op: "LogicalNot"
      input: "dynamic_seq2seq/decoder/decoder/while/All"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/LogicalAnd"
      op: "LogicalAnd"
      input: "dynamic_seq2seq/decoder/decoder/while/Less"
      input: "dynamic_seq2seq/decoder/decoder/while/LogicalNot"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      op: "LoopCond"
      input: "dynamic_seq2seq/decoder/decoder/while/LogicalAnd"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_1"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_1"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_2"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_2"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_3"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_3"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_4"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_4"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_5"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_5"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_6"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_6"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_7"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_7"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_8"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_8"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_9"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_9"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_10"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_10"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_11"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_11"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_12"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_12"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_13"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_13"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_14"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_14"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Switch_15"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/Merge_15"
      input: "dynamic_seq2seq/decoder/decoder/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/Merge_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_1"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_2"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_3"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_3:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_4"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_4:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_5"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_5:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_6"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_6:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_7"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_7:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_8"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_8:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_9"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_9:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_10"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_10:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_11"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_11:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_12"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_12:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_13"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_13:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_14"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_14:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Identity_15"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_15:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/add/y"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/add"
      op: "Add"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat/axis"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_13"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_8"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\006\000\000\000\010\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
      op: "Add"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1536
            }
            dim {
              size: 2048
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2048
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 2048
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_5"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1536
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
      op: "MatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
      op: "BiasAdd"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Const_1"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split"
      op: "Split"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
      op: "Add"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split:2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
      op: "Sigmoid"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_4"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
      op: "Sigmoid"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh"
      op: "Tanh"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
      op: "Add"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1"
      op: "Tanh"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
      op: "Sigmoid"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\010\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
      op: "Add"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
            dim {
              size: 2048
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2048
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 2048
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_7"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
      op: "MatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
      op: "BiasAdd"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Const_1"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split"
      op: "Split"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "num_split"
        value {
          i: 4
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
      op: "Add"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split:2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
      op: "Sigmoid"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_6"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
      op: "Sigmoid"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh"
      op: "Tanh"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
      op: "Add"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1"
      op: "Tanh"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
      op: "Sigmoid"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/x"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/y"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Equal"
      op: "Equal"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/x"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/All"
      op: "All"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Equal"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "When applying AttentionWrapper attention: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Const_1"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x == y did not hold element-wise:"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Const_2"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/x:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Const_3"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/y:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_0"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "When applying AttentionWrapper attention: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_1"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x == y did not hold element-wise:"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_2"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/x:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_4"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/y:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert"
      op: "Assert"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/All"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_0"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/x"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_4"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/y"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/checked_cell_output"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/ExpandDims/dim"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/ExpandDims"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/checked_cell_output"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/MatMul"
      op: "BatchMatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/ExpandDims"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/MatMul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/Squeeze"
      op: "Squeeze"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
      input: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g/read"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul/Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/Squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less"
      op: "Less"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/Const"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less/Enter"
      op: "Enter"
      input: "ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/All"
      op: "All"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "All values in memory_sequence_length must greater than zero."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Const_1"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x > 0 did not hold element-wise:"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Const_2"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (ExpandDims_1:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_0"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "All values in memory_sequence_length must greater than zero."
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_1"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x > 0 did not hold element-wise:"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_2"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (ExpandDims_1:0) = "
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      op: "Assert"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/All"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_0"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less/Enter"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Shape"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack_1"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack_2"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice"
      op: "StridedSlice"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Shape"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Const_1"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Range"
      op: "Range"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Const"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Const_1"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/ExpandDims/dim"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/ExpandDims"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less/Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Cast"
      op: "Cast"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/ExpandDims"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Less"
      op: "Less"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Range"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Cast"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like/Shape"
      op: "Shape"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like/Shape"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/mul/x"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -inf
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/mul/x"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Select"
      op: "Select"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Less"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Softmax"
      op: "Softmax"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Select"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ExpandDims/dim"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ExpandDims"
      op: "ExpandDims"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Softmax"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/MatMul"
      op: "BatchMatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ExpandDims"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/MatMul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/LuongAttention/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Squeeze"
      op: "Squeeze"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_1/axis"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_1"
      op: "ConcatV2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/checked_cell_output"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Squeeze"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1536
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\006\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/max"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/RandomUniform"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform"
      op: "Add"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/mul"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1536
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/read"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention_layer/MatMul"
      op: "MatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention_layer/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention_layer/MatMul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/TensorArrayWrite/TensorArrayWriteV3/Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_9"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Softmax"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Softmax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Softmax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_2/concat_dim"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_2"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention_layer/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/add/y"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/add"
      op: "Add"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_9"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\035\036\000\000"
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/max"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/RandomUniform"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform"
      op: "Add"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/mul"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: "infer"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 7709
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/Assign"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/output_projection/kernel"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/output_projection/kernel/read"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/output_projection/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul"
      op: "MatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/output_projection/kernel/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax/dimension"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax"
      op: "ArgMax"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax/dimension"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Equal"
      op: "Equal"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Equal/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Equal/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/Cast_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Const"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/All"
      op: "All"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Equal"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/All"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/All"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_t"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_f"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id"
      op: "Identity"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/All"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/embedding_lookup"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch_1"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Enter"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/axis"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_f"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup"
      op: "GatherV2"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter"
      op: "Enter"
      input: "embeddings/decoder/embedding_decoder/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch_1"
      op: "Switch"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Merge"
      op: "Merge"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch_1:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/LogicalOr"
      op: "LogicalOr"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Equal"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_14"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/LogicalNot_1"
      op: "LogicalNot"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_14"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Shape"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/add_1/y"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/add_1"
      op: "Add"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_1"
      input: "dynamic_seq2seq/decoder/decoder/while/add_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Fill"
      op: "Fill"
      input: "dynamic_seq2seq/decoder/decoder/while/Shape"
      input: "dynamic_seq2seq/decoder/decoder/while/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Select"
      op: "Select"
      input: "dynamic_seq2seq/decoder/decoder/while/LogicalNot_1"
      input: "dynamic_seq2seq/decoder/decoder/while/Fill"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_15"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "dynamic_seq2seq/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
      op: "TensorArrayWriteV3"
      input: "dynamic_seq2seq/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_1"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_3"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
      op: "Enter"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray_1"
      attr {
        key: "T"
        value {
          type: DT_RESOURCE
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "dynamic_seq2seq/decoder/decoder/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 32
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/add_2/y"
      op: "Const"
      input: "^dynamic_seq2seq/decoder/decoder/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/add_2"
      op: "Add"
      input: "dynamic_seq2seq/decoder/decoder/while/Identity_1"
      input: "dynamic_seq2seq/decoder/decoder/while/add_2/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_1"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/add_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_2"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_3"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_4"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_5"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_6"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_7"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_8"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_9"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_10"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_11"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/TensorArrayWrite/TensorArrayWriteV3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_12"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_13"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_14"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/LogicalOr"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/NextIteration_15"
      op: "NextIteration"
      input: "dynamic_seq2seq/decoder/decoder/while/Select"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_1"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_2"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_3"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_4"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_5"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_6"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_7"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_8"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_9"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_9"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_10"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_11"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_12"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_13"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_14"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_14"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/while/Exit_15"
      op: "Exit"
      input: "dynamic_seq2seq/decoder/decoder/while/Switch_15"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray"
      input: "dynamic_seq2seq/decoder/decoder/while/Exit_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/range"
      op: "Range"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/range/start"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/TensorArraySizeV3"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack/range"
      input: "dynamic_seq2seq/decoder/decoder/while/Exit_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 7709
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray_1"
      input: "dynamic_seq2seq/decoder/decoder/while/Exit_3"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/range"
      op: "Range"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/range/start"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/TensorArraySizeV3"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "dynamic_seq2seq/decoder/decoder/TensorArray_1"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/range"
      input: "dynamic_seq2seq/decoder/decoder/while/Exit_3"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/decoder/TensorArray_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "dynamic_seq2seq/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "ToInt64"
      op: "Cast"
      input: "dynamic_seq2seq/decoder/decoder/TensorArrayStack_1/TensorArrayGatherV3"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "index_to_string_Lookup"
      op: "LookupTableFindV2"
      input: "index_to_string"
      input: "ToInt64"
      input: "index_to_string/Const"
      attr {
        key: "Tin"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "TensorArrayStack/TensorArraySizeV3"
      op: "TensorArraySizeV3"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
      input: "dynamic_seq2seq/decoder/decoder/while/Exit_11"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "TensorArrayStack/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "TensorArrayStack/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "TensorArrayStack/range"
      op: "Range"
      input: "TensorArrayStack/range/start"
      input: "TensorArrayStack/TensorArraySizeV3"
      input: "TensorArrayStack/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "TensorArrayStack/TensorArrayGatherV3"
      op: "TensorArrayGatherV3"
      input: "dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
      input: "TensorArrayStack/range"
      input: "dynamic_seq2seq/decoder/decoder/while/Exit_11"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "element_shape"
        value {
          shape {
            dim {
              size: 1
            }
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\002\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transpose"
      op: "Transpose"
      input: "TensorArrayStack/TensorArrayGatherV3"
      input: "transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "ExpandDims_2/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "ExpandDims_2"
      op: "ExpandDims"
      input: "transpose"
      input: "ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 255.0
          }
        }
      }
    }
    node {
      name: "mul"
      op: "Mul"
      input: "ExpandDims_2"
      input: "mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "attention_images/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "attention_images"
          }
        }
      }
    }
    node {
      name: "attention_images"
      op: "ImageSummary"
      input: "attention_images/tag"
      input: "mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "bad_color"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 4
              }
            }
            int_val: 255
            int_val: 0
            int_val: 0
            int_val: 255
          }
        }
      }
      attr {
        key: "max_images"
        value {
          i: 3
        }
      }
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 15
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 15
              }
            }
            string_val: "Variable"
            string_val: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
            string_val: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/decoder/memory_layer/kernel"
            string_val: "dynamic_seq2seq/decoder/output_projection/kernel"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
            string_val: "embeddings/decoder/embedding_decoder"
            string_val: "embeddings/encoder/embedding_encoder"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 15
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 15
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/Const"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "Variable"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
      input: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel"
      input: "dynamic_seq2seq/decoder/output_projection/kernel"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      input: "embeddings/decoder/embedding_decoder"
      input: "embeddings/encoder/embedding_encoder"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/Const"
      input: "^save/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/Const"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 15
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 15
              }
            }
            string_val: "Variable"
            string_val: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
            string_val: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/decoder/memory_layer/kernel"
            string_val: "dynamic_seq2seq/decoder/output_projection/kernel"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
            string_val: "embeddings/decoder/embedding_decoder"
            string_val: "embeddings/encoder/embedding_encoder"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 15
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 15
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "Variable"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Variable"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_1"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
      input: "save/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_2"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
      input: "save/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_3"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      input: "save/RestoreV2:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_4"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      input: "save/RestoreV2:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_5"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      input: "save/RestoreV2:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_6"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      input: "save/RestoreV2:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_7"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel"
      input: "save/RestoreV2:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_8"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/output_projection/kernel"
      input: "save/RestoreV2:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_9"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
      input: "save/RestoreV2:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_10"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      input: "save/RestoreV2:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_11"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
      input: "save/RestoreV2:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_12"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      input: "save/RestoreV2:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_13"
      op: "Assign"
      input: "embeddings/decoder/embedding_decoder"
      input: "save/RestoreV2:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Assign_14"
      op: "Assign"
      input: "embeddings/encoder/embedding_encoder"
      input: "save/RestoreV2:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 17191
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_all/NoOp"
      op: "NoOp"
      input: "^save/Assign"
      input: "^save/Assign_7"
      input: "^save/Assign_8"
    }
    node {
      name: "save/restore_all/NoOp_1"
      op: "NoOp"
      input: "^save/Assign_1"
      input: "^save/Assign_10"
      input: "^save/Assign_11"
      input: "^save/Assign_12"
      input: "^save/Assign_13"
      input: "^save/Assign_14"
      input: "^save/Assign_2"
      input: "^save/Assign_3"
      input: "^save/Assign_4"
      input: "^save/Assign_5"
      input: "^save/Assign_6"
      input: "^save/Assign_9"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_all/NoOp"
      input: "^save/restore_all/NoOp_1"
    }
    node {
      name: "serialized_example"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            unknown_rank: true
          }
        }
      }
    }
    node {
      name: "ParseExample/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "ParseExample/ParseExample/names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "ParseExample/ParseExample/dense_keys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "input"
          }
        }
      }
    }
    node {
      name: "ParseExample/ParseExample"
      op: "ParseExample"
      input: "serialized_example"
      input: "ParseExample/ParseExample/names"
      input: "ParseExample/ParseExample/dense_keys_0"
      input: "ParseExample/Const"
      attr {
        key: "Ndense"
        value {
          i: 1
        }
      }
      attr {
        key: "Nsparse"
        value {
          i: 0
        }
      }
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
          }
        }
      }
    }
    node {
      name: "init_all_tables"
      op: "NoOp"
      input: "^index_to_string/table_init"
      input: "^string_to_index/hash_table/table_init"
      input: "^string_to_index_1/hash_table/table_init"
    }
    node {
      name: "init_all_tables_1"
      op: "NoOp"
      input: "^index_to_string/table_init"
      input: "^string_to_index/hash_table/table_init"
      input: "^string_to_index_1/hash_table/table_init"
    }
    node {
      name: "legacy_init_op"
      op: "NoOp"
      input: "^init_all_tables_1"
    }
    node {
      name: "save_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_6d35767a1b6c429aa3b17b038ab7114f/part"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin"
      op: "StringJoin"
      input: "save_1/Const"
      input: "save_1/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save_1/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename"
      op: "ShardedFilename"
      input: "save_1/StringJoin"
      input: "save_1/ShardedFilename/shard"
      input: "save_1/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "Variable"
            string_val: "dynamic_seq2seq/decoder/memory_layer/kernel"
            string_val: "dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2"
      op: "SaveV2"
      input: "save_1/ShardedFilename"
      input: "save_1/SaveV2/tensor_names"
      input: "save_1/SaveV2/shape_and_slices"
      input: "Variable"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel"
      input: "dynamic_seq2seq/decoder/output_projection/kernel"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/control_dependency"
      op: "Identity"
      input: "save_1/ShardedFilename"
      input: "^save_1/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save_1/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename_1/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename_1"
      op: "ShardedFilename"
      input: "save_1/StringJoin"
      input: "save_1/ShardedFilename_1/shard"
      input: "save_1/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 12
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 12
              }
            }
            string_val: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
            string_val: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
            string_val: "embeddings/decoder/embedding_decoder"
            string_val: "embeddings/encoder/embedding_encoder"
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 12
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 12
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2_1"
      op: "SaveV2"
      input: "save_1/ShardedFilename_1"
      input: "save_1/SaveV2_1/tensor_names"
      input: "save_1/SaveV2_1/shape_and_slices"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
      input: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      input: "embeddings/decoder/embedding_decoder"
      input: "embeddings/encoder/embedding_encoder"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/control_dependency_1"
      op: "Identity"
      input: "save_1/ShardedFilename_1"
      input: "^save_1/SaveV2_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save_1/ShardedFilename_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save_1/ShardedFilename"
      input: "save_1/ShardedFilename_1"
      input: "^save_1/control_dependency"
      input: "^save_1/control_dependency_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save_1/Const"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Identity"
      op: "Identity"
      input: "save_1/Const"
      input: "^save_1/MergeV2Checkpoints"
      input: "^save_1/control_dependency"
      input: "^save_1/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "Variable"
            string_val: "dynamic_seq2seq/decoder/memory_layer/kernel"
            string_val: "dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2/tensor_names"
      input: "save_1/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign"
      op: "Assign"
      input: "Variable"
      input: "save_1/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Variable"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_1"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/memory_layer/kernel"
      input: "save_1/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/memory_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_2"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/output_projection/kernel"
      input: "save_1/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/output_projection/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 7709
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/restore_shard"
      op: "NoOp"
      input: "^save_1/Assign"
      input: "^save_1/Assign_1"
      input: "^save_1/Assign_2"
    }
    node {
      name: "save_1/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 12
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 12
              }
            }
            string_val: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
            string_val: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
            string_val: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
            string_val: "embeddings/decoder/embedding_decoder"
            string_val: "embeddings/encoder/embedding_encoder"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 12
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 12
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_1/tensor_names"
      input: "save_1/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_3"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/attention_layer/kernel"
      input: "save_1/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/attention_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_4"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
      input: "save_1/RestoreV2_1:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/luong_attention/attention_g"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_5"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      input: "save_1/RestoreV2_1:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_6"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      input: "save_1/RestoreV2_1:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1536
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_7"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      input: "save_1/RestoreV2_1:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_8"
      op: "Assign"
      input: "dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      input: "save_1/RestoreV2_1:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_9"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
      input: "save_1/RestoreV2_1:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_10"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      input: "save_1/RestoreV2_1:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_11"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
      input: "save_1/RestoreV2_1:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_12"
      op: "Assign"
      input: "dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      input: "save_1/RestoreV2_1:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 2048
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_13"
      op: "Assign"
      input: "embeddings/decoder/embedding_decoder"
      input: "save_1/RestoreV2_1:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/decoder/embedding_decoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7709
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Assign_14"
      op: "Assign"
      input: "embeddings/encoder/embedding_encoder"
      input: "save_1/RestoreV2_1:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@embeddings/encoder/embedding_encoder"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 17191
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/restore_shard_1"
      op: "NoOp"
      input: "^save_1/Assign_10"
      input: "^save_1/Assign_11"
      input: "^save_1/Assign_12"
      input: "^save_1/Assign_13"
      input: "^save_1/Assign_14"
      input: "^save_1/Assign_3"
      input: "^save_1/Assign_4"
      input: "^save_1/Assign_5"
      input: "^save_1/Assign_6"
      input: "^save_1/Assign_7"
      input: "^save_1/Assign_8"
      input: "^save_1/Assign_9"
    }
    node {
      name: "save_1/restore_all/NoOp"
      op: "NoOp"
      input: "^save_1/restore_shard"
    }
    node {
      name: "save_1/restore_all/NoOp_1"
      op: "NoOp"
      input: "^save_1/restore_shard_1"
    }
    node {
      name: "save_1/restore_all"
      op: "NoOp"
      input: "^save_1/restore_all/NoOp"
      input: "^save_1/restore_all/NoOp_1"
    }
    library {
    }
    versions {
      producer: 26
    }
  }
  saver_def {
    filename_tensor_name: "save_1/Const:0"
    save_tensor_name: "save_1/Identity:0"
    restore_op_name: "save_1/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "asset_filepaths"
    value {
      node_list {
        value: "string_to_index/hash_table/table_init/asset_filepath:0"
        value: "string_to_index_1/hash_table/table_init/asset_filepath:0"
        value: "index_to_string/table_init/asset_filepath:0"
      }
    }
  }
  collection_def {
    key: "legacy_init_op"
    value {
      node_list {
        value: "legacy_init_op"
      }
    }
  }
  collection_def {
    key: "saved_model_assets"
    value {
      any_list {
        value {
          type_url: "type.googleapis.com/tensorflow.AssetFileDef"
          value: "\n8\n6string_to_index/hash_table/table_init/asset_filepath:0\022\010vocab.en"
        }
        value {
          type_url: "type.googleapis.com/tensorflow.AssetFileDef"
          value: "\n:\n8string_to_index_1/hash_table/table_init/asset_filepath:0\022\010vocab.vi"
        }
        value {
          type_url: "type.googleapis.com/tensorflow.AssetFileDef"
          value: "\n-\n+index_to_string/table_init/asset_filepath:0\022\010vocab.vi"
        }
      }
    }
  }
  collection_def {
    key: "summaries"
    value {
      node_list {
        value: "attention_images:0"
      }
    }
  }
  collection_def {
    key: "table_initializer"
    value {
      node_list {
        value: "string_to_index/hash_table/table_init"
        value: "string_to_index_1/hash_table/table_init"
        value: "index_to_string/table_init"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n&embeddings/encoder/embedding_encoder:0\022+embeddings/encoder/embedding_encoder/Assign\032+embeddings/encoder/embedding_encoder/read:02Aembeddings/encoder/embedding_encoder/Initializer/random_uniform:08\001"
        value: "\n&embeddings/decoder/embedding_decoder:0\022+embeddings/decoder/embedding_decoder/Assign\032+embeddings/decoder/embedding_decoder/read:02Aembeddings/decoder/embedding_decoder/Initializer/random_uniform:08\001"
        value: "\nEdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel:0\022Jdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign\032Jdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/read:02`dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform:08\001"
        value: "\nCdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias:0\022Hdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign\032Hdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/read:02Udynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros:08\001"
        value: "\nEdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel:0\022Jdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign\032Jdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/read:02`dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform:08\001"
        value: "\nCdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias:0\022Hdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign\032Hdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/read:02Udynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros:08\001"
        value: "\n-dynamic_seq2seq/decoder/memory_layer/kernel:0\0222dynamic_seq2seq/decoder/memory_layer/kernel/Assign\0322dynamic_seq2seq/decoder/memory_layer/kernel/read:02Hdynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform:08\001"
        value: "\nPdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel:0\022Udynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign\032Udynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read:02kdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform:08\001"
        value: "\nNdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias:0\022Sdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign\032Sdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read:02`dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros:08\001"
        value: "\nPdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel:0\022Udynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign\032Udynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read:02kdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform:08\001"
        value: "\nNdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias:0\022Sdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign\032Sdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read:02`dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros:08\001"
        value: "\n?dynamic_seq2seq/decoder/attention/luong_attention/attention_g:0\022Ddynamic_seq2seq/decoder/attention/luong_attention/attention_g/Assign\032Ddynamic_seq2seq/decoder/attention/luong_attention/attention_g/read:02Pdynamic_seq2seq/decoder/attention/luong_attention/attention_g/Initializer/ones:08\001"
        value: "\n:dynamic_seq2seq/decoder/attention/attention_layer/kernel:0\022?dynamic_seq2seq/decoder/attention/attention_layer/kernel/Assign\032?dynamic_seq2seq/decoder/attention/attention_layer/kernel/read:02Udynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform:08\001"
        value: "\n2dynamic_seq2seq/decoder/output_projection/kernel:0\0227dynamic_seq2seq/decoder/output_projection/kernel/Assign\0327dynamic_seq2seq/decoder/output_projection/kernel/read:02Mdynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform:08\001"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\nVariable:0\022\017Variable/Assign\032\017Variable/read:02\030Variable/initial_value:0"
        value: "\n&embeddings/encoder/embedding_encoder:0\022+embeddings/encoder/embedding_encoder/Assign\032+embeddings/encoder/embedding_encoder/read:02Aembeddings/encoder/embedding_encoder/Initializer/random_uniform:08\001"
        value: "\n&embeddings/decoder/embedding_decoder:0\022+embeddings/decoder/embedding_decoder/Assign\032+embeddings/decoder/embedding_decoder/read:02Aembeddings/decoder/embedding_decoder/Initializer/random_uniform:08\001"
        value: "\nEdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel:0\022Jdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign\032Jdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/read:02`dynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform:08\001"
        value: "\nCdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias:0\022Hdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign\032Hdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/read:02Udynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/zeros:08\001"
        value: "\nEdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel:0\022Jdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign\032Jdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/read:02`dynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform:08\001"
        value: "\nCdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias:0\022Hdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign\032Hdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/read:02Udynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/zeros:08\001"
        value: "\n-dynamic_seq2seq/decoder/memory_layer/kernel:0\0222dynamic_seq2seq/decoder/memory_layer/kernel/Assign\0322dynamic_seq2seq/decoder/memory_layer/kernel/read:02Hdynamic_seq2seq/decoder/memory_layer/kernel/Initializer/random_uniform:08\001"
        value: "\nPdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel:0\022Udynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign\032Udynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read:02kdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform:08\001"
        value: "\nNdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias:0\022Sdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign\032Sdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read:02`dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros:08\001"
        value: "\nPdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel:0\022Udynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign\032Udynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read:02kdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform:08\001"
        value: "\nNdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias:0\022Sdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign\032Sdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read:02`dynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros:08\001"
        value: "\n?dynamic_seq2seq/decoder/attention/luong_attention/attention_g:0\022Ddynamic_seq2seq/decoder/attention/luong_attention/attention_g/Assign\032Ddynamic_seq2seq/decoder/attention/luong_attention/attention_g/read:02Pdynamic_seq2seq/decoder/attention/luong_attention/attention_g/Initializer/ones:08\001"
        value: "\n:dynamic_seq2seq/decoder/attention/attention_layer/kernel:0\022?dynamic_seq2seq/decoder/attention/attention_layer/kernel/Assign\032?dynamic_seq2seq/decoder/attention/attention_layer/kernel/read:02Udynamic_seq2seq/decoder/attention/attention_layer/kernel/Initializer/random_uniform:08\001"
        value: "\n2dynamic_seq2seq/decoder/output_projection/kernel:0\0227dynamic_seq2seq/decoder/output_projection/kernel/Assign\0327dynamic_seq2seq/decoder/output_projection/kernel/read:02Mdynamic_seq2seq/decoder/output_projection/kernel/Initializer/random_uniform:08\001"
      }
    }
  }
  collection_def {
    key: "while_context"
    value {
      bytes_list {
        value: "\nCdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/while_context\020 \030\001 \001*@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LoopCond:02=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge:0:@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity:0B<dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit:0B>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_1:0B>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_2:0B>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_3:0B>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_4:0J\277>\nHdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/read:0\nJdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/read:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/CheckSeqLen:0\n9dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Minimum:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray:0\nldynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray_1:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_1:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_2:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_3:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_4:0\n<dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_1:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_2:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_3:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Exit_4:0\nJdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter:0\nDdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_1:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_2:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_3:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Identity_4:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less/Enter:0\n<dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less:0\nDdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less_1:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LogicalAnd:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/LoopCond:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge:1\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_1:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_1:1\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_2:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_2:1\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_3:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_3:1\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_4:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Merge_4:1\nEdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration:0\nGdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_1:0\nGdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_2:0\nGdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_3:0\nGdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/NextIteration_4:0\nDdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select/Enter:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select_1:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select_2:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch:1\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_1:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_1:1\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_2:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_2:1\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_3:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_3:1\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_4:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Switch_4:1\nOdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter:0\nQdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1:0\nIdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3:0\nadynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter:0\n[dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add/y:0\n;dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add_1/y:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/add_1:0\nKdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Add_1:0\nUdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter:0\nOdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const:0\nOdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_1:0\nOdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Const_2:0\nTdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter:0\nNdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul:0\nKdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_1:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Mul_2:0\nOdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid:0\nQdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_1:0\nQdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Sigmoid_2:0\nLdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh:0\nNdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/Tanh_1:0\nSdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat/axis:0\nNdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/concat:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:1\nMdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:2\nMdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/split:3\n7dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/zeros:0\022\201\001\n9dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/Minimum:0\022Ddynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter:0\022\301\001\nldynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:0\022Qdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1:0\022\222\001\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray_1:0\022Odynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter:0\022\242\001\nJdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/kernel/read:0\022Tdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/MatMul/Enter:0\022\241\001\nHdynamic_seq2seq/encoder/bidirectional_rnn/fw/basic_lstm_cell/bias/read:0\022Udynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/basic_lstm_cell/BiasAdd/Enter:0\022\205\001\n?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice:0\022Bdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Less/Enter:0\022\213\001\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/CheckSeqLen:0\022Jdynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter:0\022\177\n7dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/zeros:0\022Ddynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Select/Enter:0\022\242\001\n=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/TensorArray:0\022adynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter:0R=dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter:0R?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_1:0R?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_2:0R?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_3:0R?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/while/Enter_4:0Z?dynamic_seq2seq/encoder/bidirectional_rnn/fw/fw/strided_slice:0"
        value: "\nCdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/while_context\020 \030\001 \001*@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LoopCond:02=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge:0:@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity:0B<dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit:0B>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_1:0B>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_2:0B>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_3:0B>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_4:0J\277>\nHdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/read:0\nJdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/read:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/CheckSeqLen:0\n9dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Minimum:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray:0\nldynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray_1:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_1:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_2:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_3:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_4:0\n<dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_1:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_2:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_3:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Exit_4:0\nJdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter:0\nDdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_1:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_2:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_3:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Identity_4:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less/Enter:0\n<dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less:0\nDdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less_1:0\nBdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LogicalAnd:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/LoopCond:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge:1\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_1:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_1:1\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_2:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_2:1\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_3:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_3:1\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_4:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Merge_4:1\nEdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration:0\nGdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_1:0\nGdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_2:0\nGdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_3:0\nGdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/NextIteration_4:0\nDdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select/Enter:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select_1:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select_2:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch:0\n>dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch:1\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_1:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_1:1\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_2:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_2:1\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_3:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_3:1\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_4:0\n@dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Switch_4:1\nOdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter:0\nQdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1:0\nIdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3:0\nadynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter:0\n[dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add/y:0\n;dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add:0\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add_1/y:0\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/add_1:0\nKdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Add_1:0\nUdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter:0\nOdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const:0\nOdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_1:0\nOdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Const_2:0\nTdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter:0\nNdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul:0\nKdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_1:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Mul_2:0\nOdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid:0\nQdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_1:0\nQdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Sigmoid_2:0\nLdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh:0\nNdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/Tanh_1:0\nSdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat/axis:0\nNdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/concat:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:0\nMdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:1\nMdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:2\nMdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/split:3\n7dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/zeros:0\022\201\001\n9dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/Minimum:0\022Ddynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter:0\022\222\001\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray_1:0\022Odynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter:0\022\301\001\nldynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3:0\022Qdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1:0\022\213\001\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/CheckSeqLen:0\022Jdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter:0\022\205\001\n?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice:0\022Bdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Less/Enter:0\022\242\001\nJdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/kernel/read:0\022Tdynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/MatMul/Enter:0\022\241\001\nHdynamic_seq2seq/encoder/bidirectional_rnn/bw/basic_lstm_cell/bias/read:0\022Udynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/basic_lstm_cell/BiasAdd/Enter:0\022\177\n7dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/zeros:0\022Ddynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Select/Enter:0\022\242\001\n=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/TensorArray:0\022adynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter:0R=dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter:0R?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_1:0R?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_2:0R?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_3:0R?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/while/Enter_4:0Z?dynamic_seq2seq/encoder/bidirectional_rnn/bw/bw/strided_slice:0"
        value: "\n3dynamic_seq2seq/decoder/decoder/while/while_context\020 \030\001 \001*0dynamic_seq2seq/decoder/decoder/while/LoopCond:02-dynamic_seq2seq/decoder/decoder/while/Merge:0:0dynamic_seq2seq/decoder/decoder/while/Identity:0B,dynamic_seq2seq/decoder/decoder/while/Exit:0B.dynamic_seq2seq/decoder/decoder/while/Exit_1:0B.dynamic_seq2seq/decoder/decoder/while/Exit_2:0B.dynamic_seq2seq/decoder/decoder/while/Exit_3:0B.dynamic_seq2seq/decoder/decoder/while/Exit_4:0B.dynamic_seq2seq/decoder/decoder/while/Exit_5:0B.dynamic_seq2seq/decoder/decoder/while/Exit_6:0B.dynamic_seq2seq/decoder/decoder/while/Exit_7:0B.dynamic_seq2seq/decoder/decoder/while/Exit_8:0B.dynamic_seq2seq/decoder/decoder/while/Exit_9:0B/dynamic_seq2seq/decoder/decoder/while/Exit_10:0B/dynamic_seq2seq/decoder/decoder/while/Exit_11:0B/dynamic_seq2seq/decoder/decoder/while/Exit_12:0B/dynamic_seq2seq/decoder/decoder/while/Exit_13:0B/dynamic_seq2seq/decoder/decoder/while/Exit_14:0B/dynamic_seq2seq/decoder/decoder/while/Exit_15:0J\235\311\001\n\016ExpandDims_1:0\n\030dynamic_seq2seq/Cast_1:0\n\031dynamic_seq2seq/ToInt32:0\nVdynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray:0\n?dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot:0\n,dynamic_seq2seq/decoder/LuongAttention/mul:0\n?dynamic_seq2seq/decoder/attention/attention_layer/kernel/read:0\nDdynamic_seq2seq/decoder/attention/luong_attention/attention_g/read:0\nSdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read:0\nUdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read:0\nSdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read:0\nUdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read:0\n-dynamic_seq2seq/decoder/decoder/TensorArray:0\n/dynamic_seq2seq/decoder/decoder/TensorArray_1:0\n+dynamic_seq2seq/decoder/decoder/while/All:0\n<dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/All:0\nIdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax/dimension:0\n?dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax:0\n>dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Const:0\nDdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Equal/Enter:0\n>dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Equal:0\nCdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Enter:0\nCdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Merge:0\nCdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Merge:1\nDdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch:0\nDdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch:1\nFdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch_1:0\nFdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch_1:1\nTdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter:0\nSdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/axis:0\nNdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup:0\nEdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0\nFdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_f:0\nFdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_t:0\nYdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ExpandDims/dim:0\nUdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ExpandDims:0\nWdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/MatMul/Enter:0\nQdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/MatMul:0\nQdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Select:0\n\\dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Cast:0\n]dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Const:0\n_dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Const_1:0\nfdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/ExpandDims/dim:0\nbdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/ExpandDims:0\n\\dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Less:0\n]dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/SequenceMask/Range:0\nPdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Shape:0\nRdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Softmax:0\nRdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/Squeeze:0\ntdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/TensorArrayWrite/TensorArrayWriteV3/Enter:0\nndynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/TensorArrayWrite/TensorArrayWriteV3:0\nPdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/add/y:0\nNdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/add:0\n[dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/All:0\nldynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_0:0\nldynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_1:0\nldynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_2:0\nldynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Assert/data_4:0\nddynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Const:0\nfdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Const_1:0\nfdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Const_2:0\nfdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Assert/Const_3:0\n]dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Const:0\n]dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/Equal:0\nYdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/x:0\nYdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_equal/y:0\n`dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/Const:0\njdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/All:0\n{dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_0:0\n{dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_1:0\n{dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Assert/data_2:0\nsdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Const:0\nudynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Const_1:0\nudynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Assert/Const_2:0\nldynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Const:0\nqdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less/Enter:0\nkdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less:0\n~dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Add:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1:0\n\210\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter:0\n\202\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Const:0\n\202\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Const_1:0\n\202\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2:0\n\207\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter:0\n\201\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul:0\n~dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2:0\n\202\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid:0\n\204\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1:0\n\204\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2:0\n\177dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh:0\n\201\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1:0\n\206\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis:0\n\201\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/concat:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split:1\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split:2\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/split:3\n~dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Add:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1:0\n\210\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter:0\n\202\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Const:0\n\202\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Const_1:0\n\202\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2:0\n\207\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter:0\n\201\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul:0\n~dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2:0\n\202\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid:0\n\204\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1:0\n\204\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2:0\n\177dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh:0\n\201\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1:0\n\206\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis:0\n\201\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/concat:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split:0\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split:1\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split:2\n\200\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/split:3\ngdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention_layer/MatMul/Enter:0\nadynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention_layer/MatMul:0\n^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/checked_cell_output:0\nVdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat/axis:0\nQdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat:0\nXdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_1/axis:0\nSdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_1:0\n^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_2/concat_dim:0\nSdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/concat_2:0\nidynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/ExpandDims/dim:0\nedynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/ExpandDims:0\ngdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/MatMul/Enter:0\nadynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/MatMul:0\nbdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/Squeeze:0\nddynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul/Enter:0\n^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul:0\nPdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/mul/x:0\nNdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/mul:0\nZdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like/Const:0\nZdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like/Shape:0\nTdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/ones_like:0\n^dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack:0\n`dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack_1:0\n`dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice/stack_2:0\nXdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/strided_slice:0\nWdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter:0\nQdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul:0\n-dynamic_seq2seq/decoder/decoder/while/Const:0\n-dynamic_seq2seq/decoder/decoder/while/Enter:0\n0dynamic_seq2seq/decoder/decoder/while/Enter_10:0\n0dynamic_seq2seq/decoder/decoder/while/Enter_11:0\n0dynamic_seq2seq/decoder/decoder/while/Enter_12:0\n0dynamic_seq2seq/decoder/decoder/while/Enter_13:0\n0dynamic_seq2seq/decoder/decoder/while/Enter_14:0\n0dynamic_seq2seq/decoder/decoder/while/Enter_15:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_1:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_2:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_3:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_4:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_5:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_6:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_7:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_8:0\n/dynamic_seq2seq/decoder/decoder/while/Enter_9:0\n,dynamic_seq2seq/decoder/decoder/while/Exit:0\n/dynamic_seq2seq/decoder/decoder/while/Exit_10:0\n/dynamic_seq2seq/decoder/decoder/while/Exit_11:0\n/dynamic_seq2seq/decoder/decoder/while/Exit_12:0\n/dynamic_seq2seq/decoder/decoder/while/Exit_13:0\n/dynamic_seq2seq/decoder/decoder/while/Exit_14:0\n/dynamic_seq2seq/decoder/decoder/while/Exit_15:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_1:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_2:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_3:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_4:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_5:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_6:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_7:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_8:0\n.dynamic_seq2seq/decoder/decoder/while/Exit_9:0\n,dynamic_seq2seq/decoder/decoder/while/Fill:0\n0dynamic_seq2seq/decoder/decoder/while/Identity:0\n3dynamic_seq2seq/decoder/decoder/while/Identity_10:0\n3dynamic_seq2seq/decoder/decoder/while/Identity_11:0\n3dynamic_seq2seq/decoder/decoder/while/Identity_12:0\n3dynamic_seq2seq/decoder/decoder/while/Identity_13:0\n3dynamic_seq2seq/decoder/decoder/while/Identity_14:0\n3dynamic_seq2seq/decoder/decoder/while/Identity_15:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_1:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_2:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_3:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_4:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_5:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_6:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_7:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_8:0\n2dynamic_seq2seq/decoder/decoder/while/Identity_9:0\n2dynamic_seq2seq/decoder/decoder/while/Less/Enter:0\n,dynamic_seq2seq/decoder/decoder/while/Less:0\n2dynamic_seq2seq/decoder/decoder/while/LogicalAnd:0\n2dynamic_seq2seq/decoder/decoder/while/LogicalNot:0\n4dynamic_seq2seq/decoder/decoder/while/LogicalNot_1:0\n1dynamic_seq2seq/decoder/decoder/while/LogicalOr:0\n0dynamic_seq2seq/decoder/decoder/while/LoopCond:0\n-dynamic_seq2seq/decoder/decoder/while/Merge:0\n-dynamic_seq2seq/decoder/decoder/while/Merge:1\n0dynamic_seq2seq/decoder/decoder/while/Merge_10:0\n0dynamic_seq2seq/decoder/decoder/while/Merge_10:1\n0dynamic_seq2seq/decoder/decoder/while/Merge_11:0\n0dynamic_seq2seq/decoder/decoder/while/Merge_11:1\n0dynamic_seq2seq/decoder/decoder/while/Merge_12:0\n0dynamic_seq2seq/decoder/decoder/while/Merge_12:1\n0dynamic_seq2seq/decoder/decoder/while/Merge_13:0\n0dynamic_seq2seq/decoder/decoder/while/Merge_13:1\n0dynamic_seq2seq/decoder/decoder/while/Merge_14:0\n0dynamic_seq2seq/decoder/decoder/while/Merge_14:1\n0dynamic_seq2seq/decoder/decoder/while/Merge_15:0\n0dynamic_seq2seq/decoder/decoder/while/Merge_15:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_1:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_1:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_2:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_2:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_3:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_3:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_4:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_4:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_5:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_5:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_6:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_6:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_7:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_7:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_8:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_8:1\n/dynamic_seq2seq/decoder/decoder/while/Merge_9:0\n/dynamic_seq2seq/decoder/decoder/while/Merge_9:1\n5dynamic_seq2seq/decoder/decoder/while/NextIteration:0\n8dynamic_seq2seq/decoder/decoder/while/NextIteration_10:0\n8dynamic_seq2seq/decoder/decoder/while/NextIteration_11:0\n8dynamic_seq2seq/decoder/decoder/while/NextIteration_12:0\n8dynamic_seq2seq/decoder/decoder/while/NextIteration_13:0\n8dynamic_seq2seq/decoder/decoder/while/NextIteration_14:0\n8dynamic_seq2seq/decoder/decoder/while/NextIteration_15:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_1:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_2:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_3:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_4:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_5:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_6:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_7:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_8:0\n7dynamic_seq2seq/decoder/decoder/while/NextIteration_9:0\n.dynamic_seq2seq/decoder/decoder/while/Select:0\n-dynamic_seq2seq/decoder/decoder/while/Shape:0\n.dynamic_seq2seq/decoder/decoder/while/Switch:0\n.dynamic_seq2seq/decoder/decoder/while/Switch:1\n1dynamic_seq2seq/decoder/decoder/while/Switch_10:0\n1dynamic_seq2seq/decoder/decoder/while/Switch_10:1\n1dynamic_seq2seq/decoder/decoder/while/Switch_11:0\n1dynamic_seq2seq/decoder/decoder/while/Switch_11:1\n1dynamic_seq2seq/decoder/decoder/while/Switch_12:0\n1dynamic_seq2seq/decoder/decoder/while/Switch_12:1\n1dynamic_seq2seq/decoder/decoder/while/Switch_13:0\n1dynamic_seq2seq/decoder/decoder/while/Switch_13:1\n1dynamic_seq2seq/decoder/decoder/while/Switch_14:0\n1dynamic_seq2seq/decoder/decoder/while/Switch_14:1\n1dynamic_seq2seq/decoder/decoder/while/Switch_15:0\n1dynamic_seq2seq/decoder/decoder/while/Switch_15:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_1:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_1:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_2:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_2:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_3:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_3:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_4:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_4:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_5:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_5:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_6:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_6:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_7:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_7:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_8:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_8:1\n0dynamic_seq2seq/decoder/decoder/while/Switch_9:0\n0dynamic_seq2seq/decoder/decoder/while/Switch_9:1\nQdynamic_seq2seq/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter:0\nKdynamic_seq2seq/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3:0\nSdynamic_seq2seq/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:0\nMdynamic_seq2seq/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3:0\n-dynamic_seq2seq/decoder/decoder/while/add/y:0\n+dynamic_seq2seq/decoder/decoder/while/add:0\n/dynamic_seq2seq/decoder/decoder/while/add_1/y:0\n-dynamic_seq2seq/decoder/decoder/while/add_1:0\n/dynamic_seq2seq/decoder/decoder/while/add_2/y:0\n-dynamic_seq2seq/decoder/decoder/while/add_2:0\n*dynamic_seq2seq/decoder/embedding_lookup:0\n7dynamic_seq2seq/decoder/output_projection/kernel/read:0\n+embeddings/decoder/embedding_decoder/read:0\022\202\001\n-dynamic_seq2seq/decoder/decoder/TensorArray:0\022Qdynamic_seq2seq/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter:0\022O\n\031dynamic_seq2seq/ToInt32:0\0222dynamic_seq2seq/decoder/decoder/while/Less/Enter:0\022\341\001\nUdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read:0\022\207\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter:0\022\340\001\nSdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read:0\022\210\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter:0\022q\n*dynamic_seq2seq/decoder/embedding_lookup:0\022Cdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Enter:0\022\203\001\n+embeddings/decoder/embedding_decoder/read:0\022Tdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter:0\022\341\001\nUdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read:0\022\207\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter:0\022\316\001\nVdynamic_seq2seq/decoder/DeviceWrapperZeroState/AttentionWrapperZeroState/TensorArray:0\022tdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/TensorArrayWrite/TensorArrayWriteV3/Enter:0\022\222\001\n7dynamic_seq2seq/decoder/output_projection/kernel/read:0\022Wdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter:0\022\252\001\n?dynamic_seq2seq/decoder/attention/attention_layer/kernel/read:0\022gdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention_layer/MatMul/Enter:0\022\206\001\n/dynamic_seq2seq/decoder/decoder/TensorArray_1:0\022Sdynamic_seq2seq/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter:0\022\252\001\n?dynamic_seq2seq/decoder/LuongAttention/memory_layer/Tensordot:0\022gdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/MatMul/Enter:0\022\207\001\n,dynamic_seq2seq/decoder/LuongAttention/mul:0\022Wdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/MatMul/Enter:0\022\340\001\nSdynamic_seq2seq/decoder/attention/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read:0\022\210\001dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/attention/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter:0\022\254\001\nDdynamic_seq2seq/decoder/attention/luong_attention/attention_g/read:0\022ddynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/luong_attention/mul/Enter:0\022`\n\030dynamic_seq2seq/Cast_1:0\022Ddynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/Equal/Enter:0\022\203\001\n\016ExpandDims_1:0\022qdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/decoder/attention/assert_positive/assert_less/Less/Enter:0R-dynamic_seq2seq/decoder/decoder/while/Enter:0R/dynamic_seq2seq/decoder/decoder/while/Enter_1:0R/dynamic_seq2seq/decoder/decoder/while/Enter_2:0R/dynamic_seq2seq/decoder/decoder/while/Enter_3:0R/dynamic_seq2seq/decoder/decoder/while/Enter_4:0R/dynamic_seq2seq/decoder/decoder/while/Enter_5:0R/dynamic_seq2seq/decoder/decoder/while/Enter_6:0R/dynamic_seq2seq/decoder/decoder/while/Enter_7:0R/dynamic_seq2seq/decoder/decoder/while/Enter_8:0R/dynamic_seq2seq/decoder/decoder/while/Enter_9:0R0dynamic_seq2seq/decoder/decoder/while/Enter_10:0R0dynamic_seq2seq/decoder/decoder/while/Enter_11:0R0dynamic_seq2seq/decoder/decoder/while/Enter_12:0R0dynamic_seq2seq/decoder/decoder/while/Enter_13:0R0dynamic_seq2seq/decoder/decoder/while/Enter_14:0R0dynamic_seq2seq/decoder/decoder/while/Enter_15:0Z\031dynamic_seq2seq/ToInt32:0b\202\010\n\377\007\nEdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/cond_text\022Edynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0\032Fdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_t:0 \001*\244\006\nCdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Enter:0\nFdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch_1:0\nFdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch_1:1\nEdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0\nFdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_t:0\n*dynamic_seq2seq/decoder/embedding_lookup:0\022\216\001\nEdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0\022Edynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0\022t\n*dynamic_seq2seq/decoder/embedding_lookup:0\022Fdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Switch_1:1\022\212\001\nCdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Enter:0\022Cdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/Enter:0b\352\013\n\347\013\nGdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/cond_text_1\022Edynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0\032Fdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_f:0*\214\n\n?dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax:0\nTdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter:0\nUdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch:0\nWdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch_1:0\nSdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/axis:0\nNdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup:0\nEdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0\nFdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/switch_f:0\n+embeddings/decoder/embedding_decoder/read:0\022\254\001\nTdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter:0\022Tdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter:0\022\204\001\n+embeddings/decoder/embedding_decoder/read:0\022Udynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch:0\022\232\001\n?dynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/ArgMax:0\022Wdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch_1:0\022\216\001\nEdynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0\022Edynamic_seq2seq/decoder/decoder/while/BasicDecoderStep/cond/pred_id:0"
      }
    }
  }
  signature_def {
    key: "predict_nmt"
    value {
      inputs {
        key: "seq_input"
        value {
          name: "src_placeholder:0"
          dtype: DT_STRING
          tensor_shape {
            unknown_rank: true
          }
        }
      }
      outputs {
        key: "seq_output"
        value {
          name: "index_to_string_Lookup:0"
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
}
